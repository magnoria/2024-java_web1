[ 롬복 ]
	1. 정의 : 반복되는 코드들을 줄여주는 라이브러리
		* 라이브러리 : 미리 만들어진 클래스/인터페이스(코드들)
	2. 목적 : DTO, VO , Entity 에서 사용된다.
		1.DTO : 객체를 data transfer object 데이터 이동 목적으로 사용되는 객체
		2.VO : value object 데이터 값을 가진 객체 (*불변성/setter없음)
		3.entity : 개체(실재/본체) 데이터의 실제( 주로 DB 테이블/레코드)
	3. 이클립스에서 설치
		1. lombok jar 다운로드
			1. URL
			
			나중에 설치 가져와서 정리하기
			
			
			
	4. @롬복 주요 어노테이션
		1. @NoArgsConstructor : 디폴트 생성자 코드 생성	
			- @NoArgsConstructor(access = lombok.AccessLevel.PRIVATE) : private 디폴트 생성자를 생성
		2. @AllArgsConstructor : 모든 매개변수 생성자 코드 생성
		3. @Getter				: 멤버변수의 getter 메소드 코드 생성
			- @Getter class 클래스명{}			: 클래스내 모든 멤버변수의 getter 메소드 생성
			- @Getter int 변수명;				: 클래스내 특정 멤버변수의 getter 메소드 생성
			
			
		4. @Setter				: 멤버변수의 setter 메소드 코드 생성
		5. @ToString			: 멤버변수의 toString 메소드 코드 생성
		
	5. 코드 자동 생성 : 프로젝트가 컴파일(실행) 될때 지정한 어노테이션에 따라 코드가 자동으로 생선된다.
		
	[* @ : 어노테이션]
		1. 정의 : java 및 라이브러리(플임워크) 에서 코드에 메타데이터를 추가하는 문법
		2. 목적 : 1. 메타데이터제공 2. 코드간소화 3. 가독성향상
		3. 메타데이터
			1. 정의 : 코드를 성명하는 데이터
			2. 목적 : 자바 코드에 추가적인 데이터를 주입할때 사용된다.
			3. 동작 방식 
				1. 컴파일(실행)
				2. 리플렉션 : 런타임(실행중)클래스를 읽어와서 동적으로 메모리(JVM)에 객체를 생성
					- Class.forname("com.mysql.cj.jdbc.Driver); : Driver 클래스를 읽고 인스턴스를 생성
				* 코드 위에 @적어 아래 코드를 사용하는 방법을 어노테이션이라고 보면 된다
				@Getter : 아래 클래스는 내가 지정한 스티커/설명서/태그 처럼 사용해 라는 뜻
				class 클래스명{}	
					
		4. 어노테이션 종류
			1. 표준 어노테이션 : java에서 기본적으로 제공하는 어노테이션 
				@Override : 부모 메소드를 오버라딩(재정의) 설명할때 사용되는 어노테이션 (생략가능 -> 이클립스제공 일반적으로 넣어주는게 맞음)
				@Deprecated : 더 이상 사용하지 않는 코드 설명할때 사용되는 어노테이션
				등등
				
			2. 메타 어노테이션 : 어노테이션 자체에 코드를 정의하거나 동작 제어할 때 사용되는 어노테이션 / 주로 라이브러리
				각 라이브러리 회사마다 다양하게 사용된다
				1. 롬복 어노테이션
				2. 스프링 어노테이션 *
				
				
				
				
				
				